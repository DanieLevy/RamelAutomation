const fs = require('fs');
const path = require('path');

// Check if PNG files already exist
const checkExistingPNGFiles = () => {
  const iconsDir = path.join(__dirname, '..', 'public', 'icons');
  
  if (!fs.existsSync(iconsDir)) {
    return false;
  }

  // Check for main icon sizes
  const iconSizes = [72, 96, 128, 144, 152, 192, 384, 512];
  const mainIconsExist = iconSizes.every(size => {
    const pngPath = path.join(iconsDir, `icon-${size}x${size}.png`);
    return fs.existsSync(pngPath);
  });

  // Check for special icons
  const specialIcons = [
    'touch-icon-iphone.png',
    'touch-icon-ipad.png', 
    'touch-icon-iphone-retina.png',
    'touch-icon-ipad-retina.png',
    'shortcut-today.png',
    'shortcut-week.png',
    'shortcut-month.png'
  ];
  
  const specialIconsExist = specialIcons.every(iconName => {
    const pngPath = path.join(iconsDir, iconName);
    return fs.existsSync(pngPath);
  });

  return mainIconsExist && specialIconsExist;
};

// Simple icon generator using HTML5 Canvas (Node.js compatible)
const generateIcon = (size, text = '‚úÇÔ∏è', bgColor = '#2563eb', textColor = '#ffffff') => {
  // Create a simple SVG icon
  const svg = `
    <svg width="${size}" height="${size}" xmlns="http://www.w3.org/2000/svg">
      <rect width="${size}" height="${size}" fill="${bgColor}" rx="${size * 0.1}"/>
      <text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" 
            font-size="${size * 0.5}" fill="${textColor}" font-family="Arial, sans-serif">
        ${text}
      </text>
    </svg>
  `;
  return svg;
};

// Check if PNG files already exist
if (checkExistingPNGFiles()) {
  console.log('‚úÖ PNG icons already exist - skipping generation');
  console.log('üìù Using existing PNG files generated by your Python script');
  process.exit(0);
}

// Icon sizes needed for PWA
const iconSizes = [72, 96, 128, 144, 152, 192, 384, 512];

// Create icons directory
const iconsDir = path.join(__dirname, '..', 'public', 'icons');
if (!fs.existsSync(iconsDir)) {
  fs.mkdirSync(iconsDir, { recursive: true });
}

// Generate placeholder icons only if PNG doesn't exist
iconSizes.forEach(size => {
  const pngPath = path.join(iconsDir, `icon-${size}x${size}.png`);
  const svgPath = path.join(iconsDir, `icon-${size}x${size}.svg`);
  
  if (fs.existsSync(pngPath)) {
    console.log(`‚úÖ Using existing PNG: icon-${size}x${size}.png`);
    return;
  }
  
  const svg = generateIcon(size);
  fs.writeFileSync(svgPath, svg);
  console.log(`Generated SVG placeholder: icon-${size}x${size}.svg`);
});

// Generate special icons only if PNG doesn't exist
const specialIcons = [
  { name: 'touch-icon-iphone', size: 180 },
  { name: 'touch-icon-ipad', size: 152 },
  { name: 'touch-icon-iphone-retina', size: 180 },
  { name: 'touch-icon-ipad-retina', size: 167 },
  { name: 'shortcut-today', size: 96, text: '1', bgColor: '#10b981' },
  { name: 'shortcut-week', size: 96, text: '7', bgColor: '#f59e0b' },
  { name: 'shortcut-month', size: 96, text: '30', bgColor: '#ef4444' }
];

specialIcons.forEach(({ name, size, text = '‚úÇÔ∏è', bgColor = '#2563eb' }) => {
  const pngPath = path.join(iconsDir, `${name}.png`);
  const svgPath = path.join(iconsDir, `${name}.svg`);
  
  if (fs.existsSync(pngPath)) {
    console.log(`‚úÖ Using existing PNG: ${name}.png`);
    return;
  }
  
  const svg = generateIcon(size, text, bgColor);
  fs.writeFileSync(svgPath, svg);
  console.log(`Generated SVG placeholder: ${name}.svg`);
});

console.log('‚úÖ Icon generation completed!');
console.log('üìù Prioritizing PNG files over SVG placeholders'); 